# Linux Training Platform - Makefile
# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º

.PHONY: help install install-dev test clean run lint format setup-dev

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
help:
	@echo "üêß Linux Training Platform - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
	@echo ""
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:"
	@echo "  install       - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip"
	@echo "  install-dev   - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  setup-dev     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo ""
	@echo "üöÄ –ó–∞–ø—É—Å–∫:"
	@echo "  run           - –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"
	@echo "  test          - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
	@echo ""
	@echo "üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:"
	@echo "  lint          - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
	@echo "  format        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  clean         - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo ""
	@echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
	@echo "  info          - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
install:
	pip install .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
install-dev:
	pip install -e .[dev]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
setup-dev:
	@echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	python -m pip install --upgrade pip
	pip install -e .[dev]
	@echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!"

# –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞
run:
	python artix_training.py

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
test:
	@if [ -f "test_training.py" ]; then \
		python -m pytest test_training.py -v; \
	else \
		echo "‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É JSON..."; \
		python -c "import json; json.load(open('training_data.json')); print('‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')"; \
	fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
lint:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∫–æ–¥–∞..."
	@if command -v flake8 >/dev/null 2>&1; then \
		flake8 artix_training.py --max-line-length=120 --ignore=E501,W503; \
	else \
		echo "‚ö†Ô∏è  flake8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–∞–π–ª–æ–≤..."
	@python -c "import json; json.load(open('training_data.json')); print('‚úÖ training_data.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω')"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
format:
	@echo "üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞..."
	@if command -v black >/dev/null 2>&1; then \
		black artix_training.py --line-length=120; \
	else \
		echo "‚ö†Ô∏è  black –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install black"; \
	fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.tmp" -delete
	find . -type f -name "*.bak" -delete
	find . -type f -name "training_log.txt" -delete 2>/dev/null || true
	rm -rf build/ dist/ *.egg-info/ 2>/dev/null || true
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
info:
	@echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:"
	@echo "‚îú‚îÄ‚îÄ –ù–∞–∑–≤–∞–Ω–∏–µ: Linux Training Platform"
	@echo "‚îú‚îÄ‚îÄ –Ø–∑—ã–∫: Python $(shell python --version 2>&1 | cut -d' ' -f2)"
	@echo "‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: $(shell wc -l < artix_training.py) —Å—Ç—Ä–æ–∫"
	@echo "‚îú‚îÄ‚îÄ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: $(shell wc -l < training_data.json) —Å—Ç—Ä–æ–∫"
	@echo "‚îú‚îÄ‚îÄ Git —Å—Ç–∞—Ç—É—Å: $(shell git status --porcelain | wc -l) –∏–∑–º–µ–Ω–µ–Ω–∏–π"
	@echo "‚îî‚îÄ‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $(shell git log -1 --pretty=format:'%h - %s (%an, %ar)' 2>/dev/null || echo '–ù–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è')"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
dist: clean
	@echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞..."
	python setup.py sdist bdist_wheel
	@echo "‚úÖ –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω –≤ dist/"

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ PyPI (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–π–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)
upload-test:
	@echo "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Test PyPI..."
	python -m twine upload --repository testpypi dist/*

upload:
	@echo "üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ PyPI..."
	python -m twine upload dist/*

# –°–æ–∑–¥–∞–Ω–∏–µ GitHub release
release:
	@echo "üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ GitHub release..."
	@echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
	@echo "1. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã"
	@echo "2. –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ setup.py"
	@echo "3. –°–æ–∑–¥–∞–Ω git tag —Å –≤–µ—Ä—Å–∏–µ–π"
	@echo ""
	@echo "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è release –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
	@echo "git tag v1.0.0 && git push origin v1.0.0"