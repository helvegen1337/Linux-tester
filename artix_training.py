
import smtplib
import os
import random
import datetime
import re
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# --- –¶–í–ï–¢–û–í–´–ï –ö–û–î–´ –î–õ–Ø –ö–†–ê–°–ò–í–û–ì–û –í–´–í–û–î–ê ---
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    BLUE = '\033[34m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    RED = '\033[31m'
    PURPLE = '\033[35m'
    CYAN = '\033[36m'

# --- –°–ï–ö–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò-–ò ---

RECIPIENT_EMAIL = "support@linux-training.com"
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = os.getenv("SMTP_PORT", 587)
SMTP_LOGIN = os.getenv("SMTP_LOGIN")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

SESSION_LOG = []
USER_PROGRESS = {}
CURRENT_USER = ""

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ---

def load_training_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open('training_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: –§–∞–π–ª training_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω.{Colors.ENDC}")
        return None
    except json.JSONDecodeError:
        print(f"{Colors.FAIL}–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ training_data.json.{Colors.ENDC}")
        return None

def load_user_progress():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global USER_PROGRESS
    try:
        with open('user_progress.json', 'r', encoding='utf-8') as f:
            USER_PROGRESS = json.load(f)
    except FileNotFoundError:
        USER_PROGRESS = {}

def save_user_progress():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    with open('user_progress.json', 'w', encoding='utf-8') as f:
        json.dump(USER_PROGRESS, f, indent=4, ensure_ascii=False)

TRAINING_DATA = load_training_data()

# --- –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---

ACHIEVEMENTS = {
    "first_steps": {
        "name": "üéØ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "condition": lambda progress: len(progress.get('completed_tasks', [])) >= 1
    },
    "quick_learner": {
        "name": "üöÄ –ë—ã—Å—Ç—Ä—ã–π —É—á–µ–Ω–∏–∫",
        "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å 5 –∑–∞–¥–∞–Ω–∏–π –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é",
        "condition": lambda progress: len(progress.get('completed_tasks', [])) >= 5
    },
    "master_of_basics": {
        "name": "üìö –ú–∞—Å—Ç–µ—Ä –æ—Å–Ω–æ–≤",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ '–û—Å–Ω–æ–≤—ã'",
        "condition": lambda progress: check_module_completion(progress, "1")
    },
    "test_champion": {
        "name": "üèÜ –ß–µ–º–ø–∏–æ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–ü–æ–ª—É—á–∏—Ç—å 100% –≤ –ª—é–±–æ–º —Ç–µ—Å—Ç–µ",
        "condition": lambda progress: any(result.get('score', 0) == 100 for result in progress.get('test_results', {}).values())
    },
    "persistent_student": {
        "name": "üí™ –ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç",
        "description": "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        "condition": lambda progress: check_consecutive_days(progress)
    }
}

def check_module_completion(progress, module_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –º–æ–¥—É–ª–µ."""
    if not TRAINING_DATA or module_id not in TRAINING_DATA:
        return False
    
    module_tasks = set()
    completed_tasks = set(progress.get('completed_tasks', []))
    
    for cmd_data in TRAINING_DATA[module_id].get('commands', {}).values():
        for task in cmd_data.get('practice', []):
            module_tasks.add(task['task'])
    
    return module_tasks.issubset(completed_tasks)

def check_consecutive_days(progress):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π."""
    sessions = progress.get('session_stats', {}).get('sessions', [])
    if not sessions:
        return False
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    dates = sorted([datetime.datetime.strptime(s['date'], "%Y-%m-%d") for s in sessions])
    
    # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    max_streak = current_streak = 1
    for i in range(1, len(dates)):
        if (dates[i] - dates[i-1]).days == 1:
            current_streak += 1
            max_streak = max(max_streak, current_streak)
        else:
            current_streak = 1
            
    return max_streak >= 5

def check_achievements(user_progress):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if 'achievements' not in user_progress:
        user_progress['achievements'] = []
        
    new_achievements = []
    for achievement_id, achievement in ACHIEVEMENTS.items():
        if (achievement_id not in user_progress['achievements'] and 
            achievement['condition'](user_progress)):
            user_progress['achievements'].append(achievement_id)
            new_achievements.append(achievement)
            
    return new_achievements

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def log_action(message, category="INFO"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.
    
    Args:
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (INFO, SUCCESS, WARNING, ERROR)
    """
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    category_colors = {
        "INFO": Colors.BLUE,
        "SUCCESS": Colors.OKGREEN,
        "WARNING": Colors.YELLOW,
        "ERROR": Colors.PURPLE
    }
    color = category_colors.get(category, Colors.ENDC)
    
    log_entry = {
        "timestamp": timestamp,
        "user": CURRENT_USER,
        "category": category,
        "message": message
    }
    
    formatted_entry = f"[{timestamp}] [{color}{category}{Colors.ENDC}] [{CURRENT_USER}] {message}"
    SESSION_LOG.append(formatted_entry)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
    try:
        with open('training_log.txt', 'a', encoding='utf-8') as f:
            f.write(formatted_entry + '\n')
    except Exception as e:
        print(f"{Colors.PURPLE}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}{Colors.ENDC}")

def send_report_email():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–µ—Å—Å–∏–∏ –Ω–∞ –ø–æ—á—Ç—É."""
    pass

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def wait_for_enter():
    input(f"\n{Colors.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...{Colors.ENDC}")

def check_answer(user_answer, task_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool, str): (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    correct_answer = task_data['solution']
    user_clean = ' '.join(user_answer.lower().split())
    correct_clean = ' '.join(correct_answer.lower().split())

    # 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if user_clean == correct_clean:
        return True, f"{Colors.OKGREEN}–ü—Ä–∞–≤–∏–ª—å–Ω–æ!{Colors.ENDC}"

    # 2. –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏–∑ training_data.json
    if 'error_simulation' in task_data:
        for sim in task_data['error_simulation']:
            if user_clean == sim['wrong_input'].lower():
                log_action(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø—É—Å—Ç–∏–ª —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É: {sim['wrong_input']}")
                return False, f"{Colors.FAIL}–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {sim['message']}{Colors.ENDC}"

    # 3. –û–±—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if user_clean.startswith("sudo "):
        return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {Colors.YELLOW}–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (sudo) –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.{Colors.ENDC}"
    if '"' in user_answer or "'" in user_answer:
        if '"' not in correct_answer and "'" not in correct_answer:
            return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {Colors.YELLOW}–ü–æ–¥—Å–∫–∞–∑–∫–∞: –í —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –∫–∞–≤—ã—á–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã.{Colors.ENDC}"

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è rm -r
    if correct_clean.startswith("rm -r") and not user_clean.startswith("rm -r") and user_clean.startswith("rm "):
         return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {Colors.YELLOW}–ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–ª–∞–≥ '-r'.{Colors.ENDC}"

    # –û–±—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    log_action(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '{user_answer}', –û–∂–∏–¥–∞–ª–æ—Å—å: '{correct_answer}'")
    return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {Colors.OKBLUE}{correct_answer}{Colors.ENDC}"

# --- –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ï) ---

def run_practice_session(command_data):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–≥–æ –ª–µ–≥–∫–æ–≥–æ –∏–∑ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö.
    """
    completed_tasks = USER_PROGRESS[CURRENT_USER].get('completed_tasks', [])
    unsolved_tasks = [
        t for t in command_data.get('practice', [])
        if t['task'] not in completed_tasks
    ]

    if not unsolved_tasks:
        print(f"{Colors.YELLOW}–í—ã —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!{Colors.ENDC}")
        wait_for_enter()
        return

    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    min_difficulty = min(t['difficulty'] for t in unsolved_tasks)
    
    # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
    tasks_to_ask = [t for t in unsolved_tasks if t['difficulty'] == min_difficulty]
    
    task_data = random.choice(tasks_to_ask)

    clear_screen()
    print(f"{Colors.HEADER}--- –ü—Ä–∞–∫—Ç–∏–∫–∞: {command_data['name']} ---{Colors.ENDC}")
    print(f"{Colors.BOLD}–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {min_difficulty}{Colors.ENDC}\n")
    print(f"{Colors.CYAN}–ó–∞–¥–∞–Ω–∏–µ:{Colors.ENDC}\n{task_data['task']}\n")
    
    user_answer = input(f"{Colors.YELLOW}–í–∞—à –æ—Ç–≤–µ—Ç:{Colors.ENDC} ")
    log_action(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –æ—Ç–≤–µ—Ç: '{user_answer}' –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: '{task_data['task']}'")
    
    is_correct, message = check_answer(user_answer, task_data)
    
    print(f"\n{message}\n")
    
    if is_correct:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if CURRENT_USER not in USER_PROGRESS:
            USER_PROGRESS[CURRENT_USER] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if 'completed_tasks' not in USER_PROGRESS[CURRENT_USER]:
            USER_PROGRESS[CURRENT_USER]['completed_tasks'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        if task_data['task'] not in USER_PROGRESS[CURRENT_USER]['completed_tasks']:
            USER_PROGRESS[CURRENT_USER]['completed_tasks'].append(task_data['task'])
        save_user_progress()
        log_action(f"–ó–∞–¥–∞–Ω–∏–µ '{task_data['task']}' –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
        
        if 'explanation' in task_data:
            print(f"{Colors.OKGREEN}–ü–æ—è—Å–Ω–µ–Ω–∏–µ:{Colors.ENDC} {task_data['explanation']}")
    else:
        log_action("–û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
        wait_for_enter()

def run_test_session():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    clear_screen()
    print(f"{Colors.HEADER}{Colors.BOLD}--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---{Colors.ENDC}\n")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:\n")
    print(f"{Colors.GREEN}1. –ù–æ–≤–∏—á–æ–∫{Colors.ENDC} - –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print(f"{Colors.YELLOW}2. –ß—Ç–æ-—Ç–æ –ø–æ–Ω–∏–º–∞—é{Colors.ENDC} - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
    print(f"{Colors.RED}3. –û–≤–ª–∞–¥–µ–ª –∫–æ—Ä–æ–≤—å–µ–π –°—É–ø–µ—Ä–°–∏–ª–æ–π{Colors.ENDC} - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
    print(f"{Colors.PURPLE}4. üìÅ –ó–Ω–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã{Colors.ENDC} - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –ª–æ–≥–∏")
    print(f"{Colors.BLUE}5. üè™ –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–†–ú–ö){Colors.ENDC} - –∫–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —É—á–µ—Ç")
    print(f"{Colors.CYAN}6. üñ•Ô∏è Control Center{Colors.ENDC} - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("------------------------------------------")
    print(" 0. –ù–∞–∑–∞–¥")
    print("------------------------------------------")

    level_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç: ")
    if level_choice == '0':
        return
    elif level_choice in ['1', '2', '3', '4', '5', '6']:
        run_level_test(int(level_choice))
    else:
        print(f"\n{Colors.FAIL}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.{Colors.ENDC}")
        wait_for_enter()

def run_level_test(level):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è."""
    test_level_data = TRAINING_DATA.get('tests', {}).get(str(level), {})
    if not test_level_data or 'questions' not in test_level_data:
        print(f"{Colors.YELLOW}–¢–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.{Colors.ENDC}")
        wait_for_enter()
        return

    questions = test_level_data['questions']
    total_questions = len(questions)
    correct_answers = 0
    
    for i, question in enumerate(questions, 1):
        clear_screen()
        print(f"{Colors.HEADER}–í–æ–ø—Ä–æ—Å {i} –∏–∑ {total_questions}{Colors.ENDC}\n")
        print(f"{Colors.CYAN}{question['question']}{Colors.ENDC}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = question['options']
        for j, option in enumerate(options):
            print(f"{Colors.YELLOW}{j + 1}. {option}{Colors.ENDC}")
        
        print(f"\n{Colors.BLUE}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-{len(options)}) –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞{Colors.ENDC}")
        
        while True:
            user_input = input(f"\n{Colors.YELLOW}–í–∞—à –æ—Ç–≤–µ—Ç:{Colors.ENDC} ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
            if user_input == '0' or user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print(f"\n{Colors.WARNING}–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.{Colors.ENDC}")
                if i > 1:  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
                    answered_questions = i - 1
                    partial_score = (correct_answers / answered_questions) * 100
                    print(f"\n{Colors.CYAN}–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:{Colors.ENDC}")
                    print(f"–û—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ {answered_questions} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤")
                    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}")
                    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {partial_score:.1f}%")
                print(f"\n{Colors.YELLOW}–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.{Colors.ENDC}")
                wait_for_enter()
                return
            
            try:
                user_answer = int(user_input) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (0-based)
                if user_answer < 0 or user_answer >= len(options):
                    print(f"{Colors.FAIL}–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(options)} –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞{Colors.ENDC}")
                    continue
                
                correct_index = question['correct']
                if user_answer == correct_index:
                    correct_answers += 1
                    print(f"\n{Colors.OKGREEN}–ü—Ä–∞–≤–∏–ª—å–Ω–æ!{Colors.ENDC}")
                else:
                    print(f"\n{Colors.FAIL}–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.{Colors.ENDC}")
                
                print(f"\n{Colors.BOLD}–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:{Colors.ENDC} {options[correct_index]}")
                print(f"\n{Colors.CYAN}–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:{Colors.ENDC} {question['explanation']}")
                wait_for_enter()
                break
                
            except ValueError:
                print(f"{Colors.FAIL}–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(options)} –∏–ª–∏ 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞{Colors.ENDC}")
                continue
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    clear_screen()
    score_percentage = (correct_answers / total_questions) * 100
    print(f"{Colors.HEADER}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:{Colors.ENDC}\n")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {score_percentage:.1f}%\n")
    
    if score_percentage >= 90:
        print(f"{Colors.OKGREEN}–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ —ç—Ç–æ–π —Ç–µ–º–µ!{Colors.ENDC}")
    elif score_percentage >= 70:
        print(f"{Colors.YELLOW}–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏.{Colors.ENDC}")
    else:
        print(f"{Colors.RED}–°—Ç–æ–∏—Ç –µ—â–µ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è. –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!{Colors.ENDC}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    test_results = USER_PROGRESS[CURRENT_USER].setdefault('test_results', {})
    test_results[str(level)] = {
        'score': score_percentage,
        'completed_at': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_user_progress()
    wait_for_enter()

def run_scenario_session():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏."""
    clear_screen()
    print(f"{Colors.HEADER}{Colors.BOLD}--- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ---{Colors.ENDC}\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    scenarios = TRAINING_DATA.get('scenarios', {})
    if not scenarios:
        print(f"{Colors.YELLOW}–°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.{Colors.ENDC}")
        wait_for_enter()
        return
    
    while True:
        clear_screen()
        print(f"{Colors.HEADER}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:{Colors.ENDC}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        for scenario_id, scenario_data in scenarios.items():
            completed = scenario_data['id'] in USER_PROGRESS[CURRENT_USER].get('completed_scenarios', [])
            status = f"{Colors.OKGREEN}[‚úì]" if completed else f"{Colors.WARNING}[ ]"
            print(f" {scenario_id}. {Colors.CYAN}{scenario_data['name']}{Colors.ENDC} {status}")
            print(f"    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {Colors.YELLOW}{'‚òÖ' * scenario_data['difficulty']}{Colors.ENDC}")
            print(f"    {scenario_data['description']}\n")
        
        print("------------------------------------------")
        print(" 0. –ù–∞–∑–∞–¥")
        print("------------------------------------------")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π: ")
        if choice == '0':
            break
            
        if choice in scenarios:
            run_single_scenario(scenarios[choice])
        else:
            print(f"\n{Colors.FAIL}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è.{Colors.ENDC}")
            wait_for_enter()

def run_single_scenario(scenario_data):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    clear_screen()
    print(f"{Colors.HEADER}--- {scenario_data['name']} ---{Colors.ENDC}\n")
    print(f"{Colors.BOLD}–û–ø–∏—Å–∞–Ω–∏–µ:{Colors.ENDC}\n{scenario_data['description']}\n")
    print(f"{Colors.BOLD}–°–ª–æ–∂–Ω–æ—Å—Ç—å:{Colors.ENDC} {scenario_data['difficulty']}/5\n")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
    for step_num, step in enumerate(scenario_data['steps'], 1):
        print(f"\n{Colors.CYAN}–®–∞–≥ {step_num}:{Colors.ENDC}")
        print(step['task'])
        
        while True:
            user_answer = input(f"\n{Colors.YELLOW}–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ [{Colors.BOLD}help{Colors.ENDC}{Colors.YELLOW} –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏, {Colors.BOLD}skip{Colors.ENDC}{Colors.YELLOW} –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞]:{Colors.ENDC} ")
            
            if user_answer.lower() == 'help':
                print(f"\n{Colors.BLUE}–ü–æ–¥—Å–∫–∞–∑–∫–∞:{Colors.ENDC} {step['hint']}")
                continue
                
            if user_answer.lower() == 'skip':
                print(f"\n{Colors.WARNING}–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {Colors.BOLD}{step['solution']}{Colors.ENDC}")
                break
                
            is_correct, message = check_answer(user_answer, {'solution': step['solution']})
            print(f"\n{message}")
            
            if is_correct:
                if 'explanation' in step:
                    print(f"\n{Colors.OKGREEN}–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:{Colors.ENDC} {step['explanation']}")
                break
            else:
                print(f"\n{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.ENDC}")
    
    # –û—Ç–º–µ—á–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    completed_scenarios = USER_PROGRESS[CURRENT_USER].setdefault('completed_scenarios', [])
    if scenario_data['id'] not in completed_scenarios:
        completed_scenarios.append(scenario_data['id'])
        save_user_progress()
        print(f"\n{Colors.OKGREEN}–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!{Colors.ENDC}")
    
        wait_for_enter()

def show_guidance():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö –ø–æ–º–æ—â–∏."""
    clear_screen()
    print(f"{Colors.HEADER}{Colors.BOLD}--- –ù–∞–ø—É—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ ---{Colors.ENDC}\n")
    
    # –ù–∞–ø—É—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print(f"{Colors.CYAN}---------------------------------------------------------------------------------------------------------------------------------{Colors.ENDC}\n")
    print(f"{Colors.YELLOW}–õ–∏–Ω—É–∫—Å - —ç—Ç–æ –∫–∞–∫ –ø—Ä—ã–≥–Ω—É—Ç—å –≤ –ø—Ä–æ—Ä—É–±—å, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–æ–ª—å. –≠—Ç–æ –∫–∞–∫ —Å–ª–æ–∂–Ωfz hardcore RPG –∏ —Ç—ã –ø–æ–ø–∞–ª –≤  –ª–æ–∫–∞—Ü–∏—è –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –±–æ—Å—Å–æ–≤ –≤ –ø–µ—Ä–µ–º–µ—à–∫—É —Å –º–µ–ª–∫–∏–º–∏. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–≥–∞–¥–∞–µ—à—å.{Colors.ENDC}\n")
    print(f"{Colors.GREEN}–°–µ–∫—Ä–µ—Ç –∑–¥–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –∫–∞–∫–∏–º –±—ã —Å–ª–æ–∂–Ω—ã–º —Ç–µ–±–µ –Ω–µ –∫–∞–∑–∞–ª–∞—Å—å —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –µ–µ —Ä–µ—à–∏—Ç—å. –¢–æ–ª—å–∫–æ –∑–∞—Å–ø–∞–Ω–∏–≤—à–∏—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–∞–ª–∏—Ç—å –∂–µ—Å—Ç–∫–∏—Ö –±–æ—Å—Å–æ–≤ –∏ —á–µ—Ä–ø–∞—Ç—å –∫—É—á—É xp.{Colors.ENDC}\n")
    print(f"{Colors.PURPLE}–¢–æ–ª—å–∫–æ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è –¥–∞—Ä—É—é—Ç —Å–∏–ª—É –∏ –º—É–¥—Ä–æ—Å—Ç—å.{Colors.ENDC}\n")
    print(f"{Colors.BLUE}–ù–µ –ø—Ä–µ–Ω–µ–±—Ä–µ–≥–∞–π —á–µ–º-—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –≤ —Å—Ç–æ—Ä–æ–Ω—É –∑–Ω–∞–∫–æ–º–æ–≥–æ.{Colors.ENDC}\n")
    print(f"{Colors.CYAN}–í –Ω–∞—á–∞–ª–µ - —Ç—ã –Ω–µ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —Ä–∞–∑–Ω–∏—Ü—É, –Ω–æ —á–µ–º –≤—ã—à–µ –±—É–¥–µ—Ç —É—Ä–æ–≤–µ–Ω—å - —Ç–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —Ç—ã –∑–∞–∏–º–µ–µ—à—å.{Colors.ENDC}\n")
    
    print(f"{Colors.YELLOW}–ß—Ç–æ –±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞—à–∏ –∑–∞–¥–∞—á–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è ‚Äì —Ç–µ–±–µ —Ö–≤–∞—Ç–∏—Ç mc –∏ –∫–æ–º–∞–Ω–¥ 20 + –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –Ω–æ —Ç—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –±—ã—Å—Ç—Ä–æ –∏ –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –≤ –∑–∞–ø–∞—Å–µ –≤—ã–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í–µ–¥—å —Ç–∞–∫?{Colors.ENDC}\n")
    print(f"{Colors.RED}–¢–æ–≥–¥–∞ —è —Ö–æ—á—É –ø–æ–≤–µ—Å—Ç–∏ —Ç–µ–±—è —á–µ—Ä–µ–∑ —Ç–≤–æ–π –∫–æ—à–º–∞—Ä ‚Äì –ü–†–ò–í–´–ö–ê–ô –†–ê–ë–û–¢–ê–¢–¨ –ë–ï–ó MC. –õ—é–±–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–Ω–∏–º–∞–µ—Ç —Ç–≤–æ—é —Å–∫–æ—Ä–æ—Å—Ç—å, –∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ —É –Ω–∞—Å —Ç–∞–∫–∞—è... —á—Ç–æ –ø–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –Ω–∞ –∫–∞—Å—Å–µ –∏ –≤ –ë–î –∑–∞–ª–µ–∑—Ç—å.{Colors.ENDC}\n")
    print(f"{Colors.GREEN}–ß–µ–º —Å–∏–ª—å–Ω–µ–µ —Ç—ã –æ–≤–ª–∞–¥–µ–µ—à—å –∏—Å–∫—É—Å—Å—Ç–≤–æ–º \"–±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –±–æ—è\" ‚Äì —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–π–¥–µ—Ç —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞.{Colors.ENDC}\n")
    
    print(f"{Colors.BOLD}.{Colors.ENDC}\n")
    print(f"{Colors.CYAN}–ì–ª–∞–≤–Ω–æ–µ ‚Äì –ø–æ–Ω—è—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –∞ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫ –∫–æ–º–ø–æ–Ω–æ–≤–∞—Ç—å, —á—Ç–æ –ø–æ —Å–≤–æ–µ–π —Å—É—Ç–∏ ‚Äì —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –∏ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ù–∞ –ø–µ—Ä–≤—ã–π –≤–∑–≥–ª—è–¥ –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äì —Å–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ.{Colors.ENDC}\n")
    print(f"{Colors.YELLOW}–ü–æ—Ç–æ–∫–∏ STDIN STDERROR STDOUT ‚Äì —Ç–æ —á—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç –Ω–æ–≤–∏—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–¥–µ–ª–∏ —ç—Ç–æ–º—É –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –∞ —è –≤ —Ç–µ—Å—Ç—ã –≤–º–æ–Ω—Ç–∏—Ä—É—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≥–¥–µ —ç—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è.{Colors.ENDC}\n")
    
    print(f"{Colors.BLUE}–Ø –¥–µ–ª–∞–ª –≤—Å–µ –Ω–µ —Å–∞–º—ã–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –Ω–æ —Å—Ç–∞—Ä–∞–ª—Å—è —Å–æ–±–ª—é–¥–∞—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é –æ—Ç –º–∞–ª–æ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É. –¢–µ–æ—Ä–∏—é –ø–æ—á–∏—Ç–∞–µ—à—å –≤–Ω–µ —ç—Ç–æ–π —É—Ç–∏–ª–∏—Ç—ã. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ ‚Äì –ø—Ä–æ—Ö–æ–¥–∏ –í–°–ï, –∑–∞—Ç—ã–∫–∏ ‚Äì —Å–ø—Ä–∞—à–∏–≤–∞–π!{Colors.ENDC}\n")
    print(f"{Colors.GREEN}–ê —è –±—É–¥—É –≤–∏–¥–æ–∏–∑–º–µ–Ω—è—Ç—å —É—Ç–∏–ª–∏—Ç–∫—É –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –ø—Ä–æ—Å–∞–¥–∫–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –í—Å–µ —ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äì –µ—Å–ª–∏ —Ç—ã –≥–æ—Ä–∏—à—å –∂–µ–ª–∞–Ω–∏–µ–º.{Colors.ENDC}\n")
    print(f"{Colors.BOLD}–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –±–∞–ª–ª—ã –∑–¥–µ—Å—å, –ø—Ä–æ–π—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –≤–µ—Å—å —Ç–µ–æ—Ä. –º–∞—Ç–µ—Ä–∏–∞–ª, —è —Ç–µ–±–µ –æ–±–µ—â–∞—é ‚Äì —Ç—ã –±—É–¥–µ—à—å –ì–û–†–ò–õ–õ–û–ô –≤ —ç—Ç–∏—Ö –¥–∂—É–Ω–≥–ª—è—Ö. –ù–∞–¥–µ—é—Å—å —Ç–≤–æ—è –≤–µ—Ä–∞ –≤ —Å–µ–±—è, —Ç–∞–∫ –∂–µ –∫—Ä–µ–ø–∫–∞ ‚Äì –∫–∞–∫ —è –≤–µ—Ä—é –≤ —Ç–µ–±—è.{Colors.ENDC}\n")
    print(f"{Colors.HEADER}--- –í–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ ---{Colors.ENDC}\n")
    print(f"{Colors.BOLD}man <–∫–æ–º–∞–Ω–¥–∞>{Colors.ENDC} - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ")
    print("–ü—Ä–∏–º–µ—Ä: man ls - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ls\n")
    print(f"{Colors.BOLD}<–∫–æ–º–∞–Ω–¥–∞> --help{Colors.ENDC} –∏–ª–∏ {Colors.BOLD}<–∫–æ–º–∞–Ω–¥–∞> -h{Colors.ENDC} - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É")
    print("–ü—Ä–∏–º–µ—Ä: ls --help - –ø–æ–∫–∞–∂–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã ls\n")
    print(f"{Colors.YELLOW}–°–æ–≤–µ—Ç: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ man –∏–ª–∏ --help –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!{Colors.ENDC}")
    wait_for_enter()

def show_user_progress():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    clear_screen()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    title = f" –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {CURRENT_USER} "
    padding = "‚ïê" * ((60 - len(title)) // 2)
    print(f"{Colors.HEADER}‚ïî{padding}{title}{padding}‚ïó{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïë{' ' * (len(padding)*2 + len(title))}‚ïë{Colors.ENDC}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    completed_tasks = USER_PROGRESS[CURRENT_USER].get('completed_tasks', [])
    total_tasks = sum(
        len(cmd.get('practice', []))
        for mod in TRAINING_DATA.values()
        if isinstance(mod, dict) and 'commands' in mod
        for cmd in mod['commands'].values()
    )
    
    if total_tasks > 0:
        total_percentage = (len(completed_tasks) / total_tasks) * 100
        progress_bar = create_progress_bar(total_percentage)
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.PURPLE}–û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–°:{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {progress_bar}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {Colors.CYAN}{len(completed_tasks)}/{total_tasks}{Colors.ENDC} ({Colors.YELLOW}{total_percentage:.1f}%{Colors.ENDC})")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    test_results = USER_PROGRESS[CURRENT_USER].get('test_results', {})
    if test_results:
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.BLUE}–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:{Colors.ENDC}")
        levels = {
            "1": "üå± –ù–æ–≤–∏—á–æ–∫",
            "2": "üåø –ß—Ç–æ-—Ç–æ –ø–æ–Ω–∏–º–∞—é", 
            "3": "üå≥ –í–û–õ–û–°–ê–¢–ê–Ø –ì–û–†–ò–õ–õ–ê",
            "4": "üìÅ –ó–Ω–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã",
            "5": "üè™ –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–†–ú–ö)",
            "6": "üñ•Ô∏è Control Center"
        }
        for level, result in test_results.items():
            if level not in levels:
                continue
            score = result.get('score', 0)
            completed_at = result.get('completed_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            color = Colors.OKGREEN if score >= 90 else Colors.CYAN if score >= 70 else Colors.PURPLE
            progress_bar = create_progress_bar(score)
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {levels[level]}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {progress_bar}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {color}{score:.1f}%{Colors.ENDC} (–ø—Ä–æ–π–¥–µ–Ω {completed_at})")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–æ–¥—É–ª—è–º
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.GREEN}–ü–†–û–ì–†–ï–°–° –ü–û –ú–û–î–£–õ–Ø–ú:{Colors.ENDC}")
    for module_id, module_data in TRAINING_DATA.items():
        if not isinstance(module_data, dict) or 'commands' not in module_data:
            continue
            
        module_completed = 0
        module_total = 0
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–æ–¥—É–ª—é
        for cmd_id, cmd_data in module_data['commands'].items():
            cmd_completed = sum(1 for task in cmd_data.get('practice', []) if task['task'] in completed_tasks)
            cmd_total = len(cmd_data.get('practice', []))
            module_completed += cmd_completed
            module_total += cmd_total
            
        if module_total > 0:
            percentage = (module_completed / module_total) * 100
            progress_bar = create_progress_bar(percentage)
            module_name = module_data.get('name', f'–ú–æ–¥—É–ª—å {module_id}')
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{module_name}{Colors.ENDC}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {progress_bar}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} –ü—Ä–æ–≥—Ä–µ—Å—Å: {Colors.CYAN}{module_completed}/{module_total}{Colors.ENDC} ({Colors.YELLOW}{percentage:.1f}%{Colors.ENDC})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ
            for cmd_id, cmd_data in module_data['commands'].items():
                cmd_completed = sum(1 for task in cmd_data.get('practice', []) if task['task'] in completed_tasks)
                cmd_total = len(cmd_data.get('practice', []))
                if cmd_total > 0:
                    cmd_percentage = (cmd_completed / cmd_total) * 100
                    cmd_color = Colors.OKGREEN if cmd_percentage == 100 else Colors.CYAN if cmd_percentage > 50 else Colors.PURPLE
                    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   ‚Ä¢ {cmd_color}{cmd_data.get('name', f'–ö–æ–º–∞–Ω–¥–∞ {cmd_id}')}: {cmd_completed}/{cmd_total}{Colors.ENDC}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
    completed_scenarios = USER_PROGRESS[CURRENT_USER].get('completed_scenarios', [])
    scenarios = TRAINING_DATA.get('scenarios', {})
    if scenarios:
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.YELLOW}–°–¶–ï–ù–ê–†–ò–ò:{Colors.ENDC}")
        total_scenarios = len(scenarios)
        completed_count = len(completed_scenarios)
        if total_scenarios > 0:
            scenario_percentage = (completed_count / total_scenarios) * 100
            progress_bar = create_progress_bar(scenario_percentage)
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {progress_bar}")
            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {Colors.CYAN}{completed_count}/{total_scenarios}{Colors.ENDC} ({Colors.YELLOW}{scenario_percentage:.1f}%{Colors.ENDC})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    if completed_scenarios:
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        for scenario_id in completed_scenarios:
            if scenario_id in scenarios:
                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   {Colors.OKGREEN}‚úì{Colors.ENDC} {scenarios[scenario_id]['name']}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = USER_PROGRESS[CURRENT_USER].get('achievements', [])
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.PURPLE}–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:{Colors.ENDC}")
    if achievements:
        for achievement_id in achievements:
            achievement = ACHIEVEMENTS.get(achievement_id)
            if achievement:
                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   {achievement['name']} - {Colors.CYAN}{achievement['description']}{Colors.ENDC}")
    else:
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π
    stats = USER_PROGRESS[CURRENT_USER].get('session_stats', {})
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.BLUE}–°–¢–ê–¢–ò–°–¢–ò–ö–ê:{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: {Colors.CYAN}{stats.get('first_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {Colors.CYAN}{stats.get('last_login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}{Colors.ENDC}")
    
    correct_answers = stats.get('correct_answers', 0)
    total_attempts = stats.get('total_attempts', 0)
    if total_attempts > 0:
        success_rate = (correct_answers / total_attempts) * 100
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {Colors.CYAN}{success_rate:.1f}%{Colors.ENDC} ({correct_answers}/{total_attempts})")
    
    sessions = stats.get('sessions', [])
    if sessions:
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {Colors.CYAN}{len(sessions)}{Colors.ENDC}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –¥–Ω–µ–π
        dates = sorted(set(s['date'] for s in sessions))
        current_streak = 1
        for i in range(len(dates)-1, 0, -1):
            date1 = datetime.datetime.strptime(dates[i], "%Y-%m-%d")
            date2 = datetime.datetime.strptime(dates[i-1], "%Y-%m-%d")
            if (date1 - date2).days == 1:
                current_streak += 1
            else:
                break
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC}   –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {Colors.CYAN}{current_streak}{Colors.ENDC} –¥–Ω–µ–π")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–º–∫—É
    print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")
    print(f"{Colors.HEADER}‚ïö{'‚ïê' * (len(padding)*2 + len(title))}‚ïù{Colors.ENDC}")
    
    wait_for_enter()

def create_progress_bar(percentage, width=40):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã."""
    filled = int(width * percentage / 100)
    empty = width - filled
    
    if percentage >= 90:
        color = Colors.OKGREEN  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    elif percentage >= 50:
        color = Colors.CYAN     # –ì–æ–ª—É–±–æ–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    else:
        color = Colors.PURPLE   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
    bar = f"{color}{'‚óÜ' * filled}{Colors.ENDC}{'‚óá' * empty}"
    return f"[{bar}] {color}{percentage:.1f}%{Colors.ENDC}"

# --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    global CURRENT_USER
    
    if TRAINING_DATA is None:
        return

    load_user_progress()
    
    clear_screen()
    CURRENT_USER = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
    if not CURRENT_USER:
        CURRENT_USER = "–ì–æ—Å—Ç—å"
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if CURRENT_USER not in USER_PROGRESS:
        USER_PROGRESS[CURRENT_USER] = {
            'completed_tasks': [],
            'test_results': {},
            'completed_scenarios': [],
            'achievements': [],
            'session_stats': {
                'first_login': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'last_login': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'total_time': 0,
                'correct_answers': 0,
                'total_attempts': 0,
                'sessions': []
            }
        }
        log_action(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {CURRENT_USER}", "SUCCESS")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = USER_PROGRESS[CURRENT_USER].setdefault('session_stats', {})
        stats['last_login'] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        stats.setdefault('sessions', []).append({
            'date': datetime.datetime.now().strftime("%Y-%m-%d"),
            'start_time': datetime.datetime.now().strftime("%H:%M:%S")
        })
        log_action(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {CURRENT_USER}!", "INFO")
    
        save_user_progress()

    log_action("–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞.")
    while True:
        clear_screen()
        print(f"\n{Colors.HEADER}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.BOLD}           –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–†–ï–ù–ê–ñ–ï–† LINUX           {Colors.ENDC}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.YELLOW} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {CURRENT_USER}{' ' * (39 - len(CURRENT_USER))}{Colors.ENDC}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.PURPLE}1. üìñ –ù–∞—á–Ω–∏ —Å –º–µ–Ω—è.{Colors.ENDC}{' ' * 35}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.CYAN}2. üìö –£—á–µ–±–Ω—ã–µ –º–æ–¥—É–ª–∏{Colors.ENDC}{' ' * 31}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.GREEN}3. üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏{Colors.ENDC}{' ' * 37}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BLUE}4. ‚úçÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ{Colors.ENDC}{' ' * 32}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.YELLOW}5. üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å{Colors.ENDC}{' ' * 33}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.RED}0. üö™ –í—ã—Ö–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞{Colors.ENDC}{' ' * 23}{Colors.HEADER}‚ïë{Colors.ENDC}")
        print(f"{Colors.HEADER}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.ENDC}")

        mode_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ")
        if mode_choice == '1':
            show_guidance()
        elif mode_choice == '2':
            while True:
                clear_screen()
                print(f"\n{Colors.HEADER}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.ENDC}")
                print(f"{Colors.HEADER}‚ïë{Colors.BOLD}      –í–´–ë–ï–†–ò–¢–ï –£–ß–ï–ë–ù–´–ô –ú–û–î–£–õ–¨       {Colors.ENDC}{Colors.HEADER}‚ïë{Colors.ENDC}")
                print(f"{Colors.HEADER}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Colors.ENDC}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
                module_icons = {
                    "1": "üìÅ",  # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —Ñ–∞–π–ª—ã
                    "2": "üìù",  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                    "3": "‚öôÔ∏è",   # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
                    "4": "üåê",  # –°–µ—Ç–µ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã
                    "5": "üîß"   # –†–∞–±–æ—Ç–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
                }
                
                for module_id, module_data in TRAINING_DATA.items():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ (tests, scenarios)
                    if not isinstance(module_data, dict) or 'commands' not in module_data:
                        continue
                    icon = module_icons.get(str(module_id), "‚Ä¢")
                    print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.YELLOW}{module_id}{Colors.ENDC}. {icon} {Colors.CYAN}{module_data.get('name', f'–ú–æ–¥—É–ª—å {module_id}')}{Colors.ENDC}")
                
                print(f"{Colors.HEADER}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£{Colors.ENDC}")
                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.RED}0. ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥{Colors.ENDC}")
                print(f"{Colors.HEADER}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.ENDC}")
                
                module_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å: ")
                if module_choice == '0':
                    break
                    
                if module_choice in TRAINING_DATA and isinstance(TRAINING_DATA[module_choice], dict) and 'commands' in TRAINING_DATA[module_choice]:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                    while True:
                        clear_screen()
                        module_name = TRAINING_DATA[module_choice].get('name', f'–ú–æ–¥—É–ª—å {module_choice}')
                        print(f"\n{Colors.HEADER}‚ïî{'‚ïê' * (len(module_name) + 8)}‚ïó{Colors.ENDC}")
                        print(f"{Colors.HEADER}‚ïë   {Colors.BOLD}{module_name}{Colors.ENDC}{Colors.HEADER}   ‚ïë{Colors.ENDC}")
                        print(f"{Colors.HEADER}‚ï†{'‚ïê' * (len(module_name) + 8)}‚ï£{Colors.ENDC}")
                        
                        commands = TRAINING_DATA[module_choice]['commands']
                        for cmd_id, cmd_data in commands.items():
                            name = cmd_data.get('name', f'–ö–æ–º–∞–Ω–¥–∞ {cmd_id}')
                            if ' - ' in name:
                                command_name = name.split(' - ')[0]
                                description = name.split(' - ')[1]
                            else:
                                command_name = name
                                description = ''
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
                            if 'file' in command_name.lower() or 'dir' in command_name.lower():
                                icon = "üìÅ"
                            elif 'process' in command_name.lower() or 'kill' in command_name.lower():
                                icon = "‚öôÔ∏è"
                            elif 'net' in command_name.lower() or 'ssh' in command_name.lower():
                                icon = "üåê"
                            elif 'dev' in command_name.lower() or 'usb' in command_name.lower():
                                icon = "üîß"
                            else:
                                icon = "üíª"
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º
                            practice_tasks = cmd_data.get('practice', [])
                            if practice_tasks:
                                max_difficulty = max(task.get('difficulty', 1) for task in practice_tasks)
                                difficulty_color = Colors.GREEN if max_difficulty <= 2 else Colors.YELLOW if max_difficulty <= 3 else Colors.RED
                                difficulty_stars = '‚òÖ' * max_difficulty
                            else:
                                difficulty_color = Colors.GREEN
                                difficulty_stars = '‚òÖ'

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
                            print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.YELLOW}{cmd_id}{Colors.ENDC}. {icon} {Colors.CYAN}{command_name}{Colors.ENDC} {difficulty_color}{difficulty_stars}{Colors.ENDC}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–æ–º
                            if description:
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}    {Colors.PURPLE}‚îî‚îÄ {description}{Colors.ENDC}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
                            if practice_tasks:
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}    {Colors.BLUE}‚îî‚îÄ {len(practice_tasks)} –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π{Colors.ENDC}")
                        
                        print(f"{Colors.HEADER}‚ï†{'‚ïê' * (len(module_name) + 8)}‚ï£{Colors.ENDC}")
                        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.RED}0. ‚¨ÖÔ∏è  –ù–∞–∑–∞–¥{Colors.ENDC}")
                        print(f"{Colors.HEADER}‚ïö{'‚ïê' * (len(module_name) + 8)}‚ïù{Colors.ENDC}")
                        
                        cmd_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
                        if cmd_choice == '0':
                            break
                            
                        if cmd_choice in commands:
                            command_data = commands[cmd_choice]
                            
                            while True:
                                clear_screen()
                                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ä–∞–º–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                                title = f" {command_data['name']} "
                                padding = "‚ïê" * ((50 - len(title)) // 2)
                                print(f"{Colors.HEADER}‚ïî{padding}{title}{padding}‚ïó{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{' ' * (len(padding)*2 + len(title))}‚ïë{Colors.ENDC}")

                                # –í—ã–≤–æ–¥–∏–º —Ç–µ–æ—Ä–∏—é —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.PURPLE}–¢–ï–û–†–ò–Ø:{Colors.ENDC}")
                                theory_lines = command_data['theory'].split('\n')
                                for line in theory_lines:
                                    if line.strip():
                                        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.CYAN}{line}{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")

                                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.YELLOW}–ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:{Colors.ENDC}")
                                usage_lines = command_data['when_useful'].split('\n')
                                for line in usage_lines:
                                    if line.strip():
                                        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.GREEN}{line}{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")

                                # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.BOLD}{Colors.BLUE}–ü–ê–†–ê–ú–ï–¢–†–´:{Colors.ENDC}")
                                params_lines = command_data['params'].split('\n')
                                for line in params_lines:
                                    if line.strip():
                                        print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.YELLOW}{line}{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC}")

                                # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Ä–∞–º–∫–∏ —Å –º–µ–Ω—é
                                print(f"{Colors.HEADER}‚ï†{'‚ïê' * (len(padding)*2 + len(title))}‚ï£{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.GREEN}1.{Colors.ENDC} {Colors.BOLD}–ü—Ä–∞–∫—Ç–∏–∫–∞{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïë{Colors.ENDC} {Colors.RED}0.{Colors.ENDC} {Colors.BOLD}–ù–∞–∑–∞–¥{Colors.ENDC}")
                                print(f"{Colors.HEADER}‚ïö{'‚ïê' * (len(padding)*2 + len(title))}‚ïù{Colors.ENDC}")
                                
                                action_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
                                if action_choice == '0':
                                    break
                                elif action_choice == '1':
                                    run_practice_session(command_data)
                                else:
                                    print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
                                    wait_for_enter()
                        else:
                            print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã.")
                            wait_for_enter()
                else:
                    print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥—É–ª—è.")
                    wait_for_enter()
        elif mode_choice == '3':
            run_scenario_session()
        elif mode_choice == '4':
            run_test_session()
        elif mode_choice == '5':
            show_user_progress()
        elif mode_choice == '0':
            log_action("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—ã—Ö–æ–¥.")
            break
        else:
            print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
            wait_for_enter()

    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
    log_action("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    send_report_email()
    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        log_action("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä–≤–∞–Ω–∞ (Ctrl+C).")
        send_report_email()
        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")